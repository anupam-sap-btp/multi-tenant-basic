xs-app.json for approuter:
{ 
  "welcomeFile": "abcdefbrowse/",
  "routes": [
    {
      "source": "^/-/cds/.*",
      "destination": "mtx-api",
      "authenticationType": "none"
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}

replaced xs-app.json in approuter:
{
  "routes": [
    {
      "source": "^/(.*)$",
      "target": "$1",
      "destination": "srv-api",
      "csrfProtection": true
    }
  ],
  "welcomeFile": "/productui"
}


xs-app.json for fiori:
{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/resources/(.*)$",
      "target": "/resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/test-resources/(.*)$",
      "target": "/test-resources/$1",
      "authenticationType": "none",
      "destination": "ui5"
    },
    {
      "source": "^/?odata/v4/catalog/(.*)$",
      "target": "/odata/v4/catalog/$1",
      "destination": "srv-api",
      "authenticationType": "xsuaa",
      "csrfProtection": true
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}

redirect uri:
- https://*.cfapps.us10-001.hana.ondemand.com/**

destination for srv-api:
  requires:
    - name: srv-api

          - Authentication: NoAuthentication
            HTML5.DynamicDestination: true
            HTML5.ForwardAuthToken: true
            Name: srv-api
            ProxyType: Internet
            Type: HTTP
            URL: ~{srv-api/srv-url}


add to mtx require section in mta.yaml
requires:
  - name: app-api
    properties:
      SUBSCRIPTION_URL: ~{app-protocol}://\${tenant_subdomain}-~{app-uri}
  - name: abcdef-db
  - name: abcdef-html5-runtime
  - name: abcdef-registry
  - name: abcdef-auth
  - name: abcdef-destination            

add approuter properties:
properties:
    TENANT_HOST_PATTERN: ^(.*)-${default-uri}

add approuter requires:
- name: mtx-api
    group: destinations
    properties:
      name: mtx-api
      url: ~{mtx-url}       

change resource -> auth
tanent-mode: shared
change resources -> db
- name: abcdef-db
  type: org.cloudfoundry.managed-service
  parameters:
    service: service-manager
    service-plan: container      

remove db deployer part from module section of mta.yaml
- name: mtapptest-db-deployer
  type: hdb
  path: gen/db
  requires:
  - name: mtapptest-db
  parameters:
    buildpack: nodejs_buildpack    


To make destination tenant specific following changes are required:
1. Create the destination at the instance level    
          - Authentication: NoAuthentication
            HTML5.DynamicDestination: true
            HTML5.ForwardAuthToken: true
            Name: testdest
            ProxyType: Internet
            Type: HTTP
            URL: https://f330d3fetrial-dev-testapps-n-srv.cfapps.us10-001.hana.ondemand.com
2. 
          existing_destinations_policy: ignore
3. Add server.js for mtx/sidecar. This will help to generate tenant specific dependencies
const cds = require('@sap/cds');

const xsenv = require('@sap/xsenv');
cds.on('served', async () => {
    console.log("Served!!!");
  const { 'cds.xt.SaasProvisioningService':provisioning } = cds.services
    await provisioning.prepend(() => {
      provisioning.on('dependencies', async (req, next) => {
        console.log("Dependencies!!!");
        await next()
        const services = xsenv.getServices({
          dest: { label: 'destination' }
        })
        console.log('Services>>>',services);
        let dependencies = [
          {
            xsappname: services.dest.xsappname
          }
        ]
        console.log("Dependencies>>>>>", dependencies);
        return dependencies
      })
    })
})

module.exports = cds.server;

4. Declare the destination in package.json of the service
  "cds": {
    "requires": {
      ..........
      ..........
      "test-dest":{
        "kind": "rest",
        "credentials": {
          "destination": "testdest"
        }
      }
    }
  },

5. Connect to the destination and call the API for the application (cloud sdk does not work)
        const response = (await cds.connect.to('test-dest')).send({
            method: 'get', path: '/odata/v4/product/Products'
        });


Enabling API Access from consumer. This cannot fetch data from tenant specific destination yet
1. Create broker service: add broker folder, npm init, npm install @sap/sbf, add catalog.json. Role
specific plans can be defined. run npx gen-catalog-ids to generate ids for the service and plans
2. xs-security.json of the main app should have "authorities-inheritance": false
3. Add broker module in mta.yaml and plan with authorities. the plan name is the names from config.json
and authorities are the ones from xs-security.json
4. The xsuaa resource should have service-plan: broker

Consuming the broker in consumer subaccount
1. use BTP CLI to login: btp login, btp list accounts/subaccounts, btp target --subaccount <subaccount id of the consumer account>
2. Get the service broker url from subscriber, get the user name and password from user-provided variables of the broker
3. Register the service: btp register services/broker --name poetry-slams-servicebroker --url <provider service broker url> --user "<user>" --password "<password>" --subaccount <consumer subaccount id>
4. Now from BTP cockpit create an instance of the broker. Choose environment as others. Give a unique name of the instance and put the 
following JSON config
{ "xs-security": { "xsappname": "<name of the instance>", "oauth2-configuration": { "credential-types": ["binding-secret"] } } }
5. Create a binding and use the credentials to authenticate and then fetch the records





This part did not work - tried to call destination without dependencies
        try {
            // Check if the destination exists using the SAP Cloud SDK reusable getDestination function
            // The incoming JWT-token contains the subaccount information to retrieve the destination for the correct tenant
            const jwt = retrieveJwt(req) || retrieveJwt(cds.context.http?.req);
            const dest = await getDestination({
                destinationName: 'testdest_c',
                jwt: jwt
            });
            console.log(dest.url);
            const response = await executeHttpRequest(dest,
                // {destinationName: 'testdest'},
                {
                    method: 'get', url: '/odata/v4/product/Products'
                });
                return response;
        } catch (error) {
            // App reacts error tolerant if the destination cannot be retrieved
            console.error(`GET_DESTINATION; ${error}`);
        }
        return null;

package.json - this is not required Now
,
        "destinationOptions": {
          "selectionStrategy": "alwaysSubscriber"
        }